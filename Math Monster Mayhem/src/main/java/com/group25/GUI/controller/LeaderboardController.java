package com.group25.GUI.controller;

import java.awt.Taskbar;
import java.awt.Taskbar.Feature;
import java.awt.Toolkit;
import java.io.IOException;
import java.util.Comparator;
import java.util.List;

import com.group25.BubsFancyButtonBorder;
import com.group25.User;

import javafx.beans.property.ReadOnlyIntegerWrapper;
import javafx.beans.property.ReadOnlyStringWrapper;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.image.Image;
import javafx.stage.Stage;

/**
 * Controller class for the leaderboard view.
 * @author Adam Murdock Gale, Sameer Mehboob Bugti, Saad Meshaal Koker, Jesse Titus, Fahmid Abdullah 
 */
public class LeaderboardController {

    @FXML
    private BubsFancyButtonBorder backBtn;

    @FXML
    private TableView<User> leaderboardTable;

    @FXML
    private TableColumn<User, Number> rankColumn;

    @FXML
    private TableColumn<User, String> nameColumn;

    @FXML
    private TableColumn<User, Number> scoreColumn;

    /**
     * Initializes the leaderboard view.
     * Populates the leaderboard with the top 5 highest scores.
     */
    public void initialize() {
        // Populate leaderboard with top 5 highest scores
        List<User> userList = User.getAllPlayersInfo();

        // Sort the userList based on scores in descending order
        userList.sort(Comparator.comparingInt(User::getScore).reversed());

        // Clear existing items from the leaderboard table
        leaderboardTable.getItems().clear();

        // Populate the leaderboard table with the top 5 users
        for (int i = 0; i < Math.min(5, userList.size()); i++) {
            User user = userList.get(i);
            // Add user to leaderboard table
            leaderboardTable.getItems().add(user);
        }

        // Bind rankColumn with user's rank (index + 1)
        rankColumn.setCellValueFactory(cellData -> new ReadOnlyIntegerWrapper(cellData.getTableView().getItems().indexOf(cellData.getValue()) + 1));

        // Bind nameColumn with user's name
        nameColumn.setCellValueFactory(cellData -> new ReadOnlyStringWrapper(cellData.getValue().getUsername()));

        // Bind scoreColumn with user's score
        scoreColumn.setCellValueFactory(cellData -> new ReadOnlyIntegerWrapper(cellData.getValue().getScore()));
    }

    /**
     * Handles the click event of the back button.
     * Switches to the main scene when the back button is clicked.
     * @param event The action event generated by clicking the back button.
     */
    @FXML
    private void backBtnClicked(ActionEvent event) {
        try {
            //Set icon on the taskbar/dock
            if (Taskbar.isTaskbarSupported()) {
                Taskbar taskbar = Taskbar.getTaskbar();
                if (taskbar.isSupported(Feature.ICON_IMAGE)) {
                    final Toolkit defaultToolkit = Toolkit.getDefaultToolkit();
                    var dockIcon = defaultToolkit.getImage("src/main/java/com/group25/GUI/assets/icon.png");
                    taskbar.setIconImage(dockIcon);
                }
            }
            
            // Load the MainScene.fxml file
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/group25/GUI/fxml/MainScene.fxml"));
            Parent root = loader.load();

            // Set up the main scene stage
            Stage stage = new Stage();
            stage.setScene(new Scene(root));
            Image appIcon = new Image("file:src/main/java/com/group25/GUI/assets/icon.png");
            stage.getIcons().add(appIcon);
            stage.show();

            // Close the current stage (Leaderboard scene)
            Stage currentStage = (Stage) backBtn.getScene().getWindow();
            stage.setResizable(false);
            currentStage.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
